name: 'setup-dlang test action'
description: 'Verify a D compiler installation'
inputs:
  dc:
    description: 'D compiler passed to setup-dlang'
    required: false
    default: ''
  gh_token:
    description: "Token to use when doing Github API request (for ldc-master)"
    default: ${{ github.token }}
    required: false
  gdmd_sha:
    descript: "Commit in D-programming-gdc/gdmd"
    default: 'latest'
runs:
  using: "composite"
  steps:
    - name: Install D compiler
      uses: ./
      with:
        compiler: ${{ inputs.dc }}
        gh_token: ${{ inputs.gh_token }}
        gdmd_sha: ${{ inputs.gdmd_sha }}

    - name: Verify D compiler ($DC)
      shell: bash
      run: |
        mkdir -p d-ver-simple
        pushd d-ver-simple
        $DC ../.github/hello.d
        if [[ ${DC} == *gdc* ]]; then
            ./a.out
        else
            ./hello
        fi
        popd

    - name: Verify D Compiler dmd-wrapper ($DMD)
      shell: bash
      run: |
        mkdir -p d-ver-run
        pushd d-ver-run
        $DMD -run ../.github/hello.d
        popd

    - name: Verify D compiler with explicit bitness ($DC)
      if: ${{ startsWith(inputs.dc, 'dmd') }}
      shell: bash
      run: |
        mkdir -p d-ver-m
        pushd d-ver-m
        $DC -m64 ../.github/hello.d && ./hello
        popd

    - name: Verify D compiler ($DC, shared)
      if: ${{ !startsWith(inputs.dc, 'g') }} # fails with gdc
      shell: bash
      run: |
        mkdir -p d-ver-shared
        pushd d-ver-shared
        $DC -shared ../.github/hello.d
        popd


    - name: Verify D compiler (dub)
      if: ${{ !startsWith(inputs.dc, 'g') }} # dub doesn't come with gdc by default
      shell: bash
      run: |
        mkdir -p d-ver-dub
        pushd d-ver-dub
        dub run --single -q ../.github/hello.d
        popd
